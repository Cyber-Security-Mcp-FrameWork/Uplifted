[pytest]
# pytest 配置文件

# 测试文件和目录模式
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 测试目录
testpaths = server/tests

# 输出选项
addopts =
    # 详细输出
    -v
    # 显示本地变量
    --showlocals
    # 显示测试覆盖率
    --cov=server/uplifted
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    # 并行测试 (使用 CPU 核心数)
    -n auto
    # 失败时不立即退出
    --maxfail=5
    # 严格标记
    --strict-markers
    # 警告摘要
    -ra
    # 颜色输出
    --color=yes
    # HTML 报告
    --html=server/tests/reports/report.html
    --self-contained-html

# 最小 Python 版本
minversion = 7.0

# 标记
markers =
    unit: 单元测试 - 测试单个功能或类
    integration: 集成测试 - 测试多个模块的集成
    e2e: 端到端测试 - 测试完整的用户场景
    slow: 慢速测试 - 运行时间超过 1 秒的测试
    performance: 性能测试 - 性能基准测试
    security: 安全测试 - 安全性测试

    # 模块标记
    auth: 认证模块测试
    database: 数据库模块测试
    cache: 缓存模块测试
    monitoring: 监控模块测试
    plugin: 插件系统测试
    config: 配置管理测试
    core: 核心模块测试
    api: API 测试

    # 依赖标记
    requires_redis: 需要 Redis 连接
    requires_postgres: 需要 PostgreSQL 连接
    requires_network: 需要网络连接

# 覆盖率配置
[coverage:run]
source = server/uplifted
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*
    */dist-packages/*
branch = True

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    # 排除标准行
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

[coverage:html]
directory = server/tests/coverage_html

[coverage:xml]
output = server/tests/coverage.xml

# 日志配置
[pytest.logging]
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = server/tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_file_date_format = %Y-%m-%d %H:%M:%S

# 异步测试配置
asyncio_mode = auto

# 超时配置 (使用 pytest-timeout)
timeout = 300
timeout_method = thread

# 基准测试配置
[tool:pytest-benchmark]
min_rounds = 5
max_time = 2.0
min_time = 0.000005
timer = time.perf_counter
calibration_precision = 10
warmup = true
